// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package networking is a generated GoMock package.
package networking

import (
	http "net/http"
	url "net/url"
	reflect "reflect"

	goquery "github.com/PuerkitoBio/goquery"
	gomock "github.com/golang/mock/gomock"
)

// MockIFNetworkingService is a mock of IFNetworkingService interface.
type MockIFNetworkingService struct {
	ctrl     *gomock.Controller
	recorder *MockIFNetworkingServiceMockRecorder
}

// MockIFNetworkingServiceMockRecorder is the mock recorder for MockIFNetworkingService.
type MockIFNetworkingServiceMockRecorder struct {
	mock *MockIFNetworkingService
}

// NewMockIFNetworkingService creates a new mock instance.
func NewMockIFNetworkingService(ctrl *gomock.Controller) *MockIFNetworkingService {
	mock := &MockIFNetworkingService{ctrl: ctrl}
	mock.recorder = &MockIFNetworkingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFNetworkingService) EXPECT() *MockIFNetworkingServiceMockRecorder {
	return m.recorder
}

// CorrectLocation mocks base method.
func (m *MockIFNetworkingService) CorrectLocation(res http.Response, targetUrl string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CorrectLocation", res, targetUrl)
	ret0, _ := ret[0].(error)
	return ret0
}

// CorrectLocation indicates an expected call of CorrectLocation.
func (mr *MockIFNetworkingServiceMockRecorder) CorrectLocation(res, targetUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CorrectLocation", reflect.TypeOf((*MockIFNetworkingService)(nil).CorrectLocation), res, targetUrl)
}

// CreateClient mocks base method.
func (m *MockIFNetworkingService) CreateClient(jar *http.CookieJar) (*http.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClient", jar)
	ret0, _ := ret[0].(*http.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClient indicates an expected call of CreateClient.
func (mr *MockIFNetworkingServiceMockRecorder) CreateClient(jar interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClient", reflect.TypeOf((*MockIFNetworkingService)(nil).CreateClient), jar)
}

// GetJsonToStruct mocks base method.
func (m *MockIFNetworkingService) GetJsonToStruct(client *http.Client, url string, structure interface{}) (*http.Response, interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJsonToStruct", client, url, structure)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetJsonToStruct indicates an expected call of GetJsonToStruct.
func (mr *MockIFNetworkingServiceMockRecorder) GetJsonToStruct(client, url, structure interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJsonToStruct", reflect.TypeOf((*MockIFNetworkingService)(nil).GetJsonToStruct), client, url, structure)
}

// GetPage mocks base method.
func (m *MockIFNetworkingService) GetPage(client *http.Client, url string) (*http.Response, *goquery.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPage", client, url)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(*goquery.Document)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPage indicates an expected call of GetPage.
func (mr *MockIFNetworkingServiceMockRecorder) GetPage(client, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPage", reflect.TypeOf((*MockIFNetworkingService)(nil).GetPage), client, url)
}

// PostForm mocks base method.
func (m *MockIFNetworkingService) PostForm(client *http.Client, url string, values *url.Values) (*http.Response, *goquery.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostForm", client, url, values)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(*goquery.Document)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PostForm indicates an expected call of PostForm.
func (mr *MockIFNetworkingServiceMockRecorder) PostForm(client, url, values interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostForm", reflect.TypeOf((*MockIFNetworkingService)(nil).PostForm), client, url, values)
}

// MockifPrivateNetworkingService is a mock of ifPrivateNetworkingService interface.
type MockifPrivateNetworkingService struct {
	ctrl     *gomock.Controller
	recorder *MockifPrivateNetworkingServiceMockRecorder
}

// MockifPrivateNetworkingServiceMockRecorder is the mock recorder for MockifPrivateNetworkingService.
type MockifPrivateNetworkingServiceMockRecorder struct {
	mock *MockifPrivateNetworkingService
}

// NewMockifPrivateNetworkingService creates a new mock instance.
func NewMockifPrivateNetworkingService(ctrl *gomock.Controller) *MockifPrivateNetworkingService {
	mock := &MockifPrivateNetworkingService{ctrl: ctrl}
	mock.recorder = &MockifPrivateNetworkingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockifPrivateNetworkingService) EXPECT() *MockifPrivateNetworkingServiceMockRecorder {
	return m.recorder
}
