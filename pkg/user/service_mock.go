// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package user is a generated GoMock package.
package user

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIFUserService is a mock of IFUserService interface.
type MockIFUserService struct {
	ctrl     *gomock.Controller
	recorder *MockIFUserServiceMockRecorder
}

// MockIFUserServiceMockRecorder is the mock recorder for MockIFUserService.
type MockIFUserServiceMockRecorder struct {
	mock *MockIFUserService
}

// NewMockIFUserService creates a new mock instance.
func NewMockIFUserService(ctrl *gomock.Controller) *MockIFUserService {
	mock := &MockIFUserService{ctrl: ctrl}
	mock.recorder = &MockIFUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFUserService) EXPECT() *MockIFUserServiceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockIFUserService) CreateUser(input *UserInput) (*UserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", input)
	ret0, _ := ret[0].(*UserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIFUserServiceMockRecorder) CreateUser(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIFUserService)(nil).CreateUser), input)
}

// MockifPrivateUserService is a mock of ifPrivateUserService interface.
type MockifPrivateUserService struct {
	ctrl     *gomock.Controller
	recorder *MockifPrivateUserServiceMockRecorder
}

// MockifPrivateUserServiceMockRecorder is the mock recorder for MockifPrivateUserService.
type MockifPrivateUserServiceMockRecorder struct {
	mock *MockifPrivateUserService
}

// NewMockifPrivateUserService creates a new mock instance.
func NewMockifPrivateUserService(ctrl *gomock.Controller) *MockifPrivateUserService {
	mock := &MockifPrivateUserService{ctrl: ctrl}
	mock.recorder = &MockifPrivateUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockifPrivateUserService) EXPECT() *MockifPrivateUserServiceMockRecorder {
	return m.recorder
}

// login mocks base method.
func (m *MockifPrivateUserService) login(username, password string) (*UserCookie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "login", username, password)
	ret0, _ := ret[0].(*UserCookie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// login indicates an expected call of login.
func (mr *MockifPrivateUserServiceMockRecorder) login(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "login", reflect.TypeOf((*MockifPrivateUserService)(nil).login), username, password)
}
